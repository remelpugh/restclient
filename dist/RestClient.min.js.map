{"version":3,"sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","Exception.js","RestClient.min.js","HttpMethod.js","OptionsNotSuppliedException.js","RestClient.js","Utilities.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","RestClient","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"Exception","message","prototype","toString",2,"HttpMethod",3,"__extends","d","b","__","constructor","p","hasOwnProperty","OptionsNotSuppliedException","_super","./Exception",4,"utils","clientOptions","cache","localStorage","options","_","isUndefined","config","headers","queryString","schema","parseSchema","ajax","url","method","_this","cacheKey","schemaDefinition","cacheData","httpMethod","toUpperCase","isEmpty","parseData","data","isSchemaDefined","parsed","JSON","parse","sort","isArray","sortOrder","each","order","dir","direction","toLowerCase","fields","field","split","fieldValue","obj","property","Promise","resolve","reject","query","concat","defaults","uniq","getItem","then","response","GET","setItem","ex","errors","error","get","getUri","post","settings","stringify","POST","put","PUT","remove","DELETE","updateSchema","currentKeys","keys","newKeys","difference","key","AjaxOptions","serialize","indexOf","errorResponse","request","createXmlHttpRequest","isNull","onerror","onload","status","responseText","contentType","setRequestHeader","header","name","value","send","xhr","XMLHttpRequest","has","open","uri","isString","baseApiUri","isObject","undefined","definition","args","script","idScript","executeScript","push","slice","join","Function","autoGenerateCrud","deleteScript","postScript","putScript","newKey","charAt","substring","deleteKey","postKey","putKey","argsFiltered","filteredArgs","match","matchCount","parameters","regexp","RegExp","shift","arg","json","index","test","./HttpMethod","./OptionsNotSuppliedException","./Utilities",5,"Utilities","formatString","format","params","_i","arguments","formatted","replace","parameter","encodeURIComponent"],"mappings":"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","file":"RestClient.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var Exception = (function () {\n    function Exception(message) {\n        this.message = message;\n    }\n    Exception.prototype.toString = function () {\n        return this.message;\n    };\n    return Exception;\n})();\nmodule.exports = Exception;\n",null,"var HttpMethod;\n(function (HttpMethod) {\n    HttpMethod[HttpMethod[\"DELETE\"] = 0] = \"DELETE\";\n    HttpMethod[HttpMethod[\"GET\"] = 1] = \"GET\";\n    HttpMethod[HttpMethod[\"POST\"] = 2] = \"POST\";\n    HttpMethod[HttpMethod[\"PUT\"] = 3] = \"PUT\";\n})(HttpMethod || (HttpMethod = {}));\nmodule.exports = HttpMethod;\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Exception = require(\"./Exception\");\nvar OptionsNotSuppliedException = (function (_super) {\n    __extends(OptionsNotSuppliedException, _super);\n    function OptionsNotSuppliedException() {\n        _super.call(this, \"Options must be supplied.\");\n    }\n    return OptionsNotSuppliedException;\n})(Exception);\nmodule.exports = OptionsNotSuppliedException;\n","var HttpMethod = require(\"./HttpMethod\");\nvar utils = require(\"./Utilities\");\nvar OptionsNotSuppliedException = require(\"./OptionsNotSuppliedException\");\nvar RestClient = (function () {\n    function RestClient(clientOptions) {\n        this.cache = window.localStorage;\n        this.utils = utils;\n        var options = clientOptions;\n        if (_.isUndefined(clientOptions)) {\n            throw new OptionsNotSuppliedException();\n        }\n        this.config = options.config;\n        this.headers = options.headers || [];\n        this.queryString = options.queryString || {};\n        this.schema = options.schema || {};\n        this.parseSchema();\n    }\n    RestClient.prototype.ajax = function (url, method, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var cacheData = this.config.cacheData;\n        var cacheKey;\n        var httpMethod = HttpMethod[method.toUpperCase()];\n        var schemaDefinition;\n        if (cacheData) {\n            cacheKey = \"RestClient_\" + url;\n        }\n        if (!_.isEmpty(options.schemaDefinition)) {\n            schemaDefinition = this.schema[options.schemaDefinition];\n        }\n        if (_.isUndefined(options.headers)) {\n            options.headers = [];\n        }\n        var parseData = function (data) {\n            var isSchemaDefined = !_.isUndefined(schemaDefinition);\n            var parsed = JSON.parse(data);\n            if (isSchemaDefined) {\n                if (typeof schemaDefinition.parse === \"function\") {\n                    parsed = schemaDefinition.parse(parsed);\n                }\n                if (typeof schemaDefinition.sort !== \"undefined\" && _.isArray(parsed)) {\n                    var sortOrder = schemaDefinition.sort;\n                    if (!_.isArray(sortOrder)) {\n                        sortOrder = [sortOrder];\n                    }\n                    _.each(sortOrder, function (order) {\n                        parsed.sort(function (a, b) {\n                            var dir = (order.direction.toLowerCase() === \"asc\") ? 1 : -1;\n                            var fields = order.field.split(\".\");\n                            var fieldValue = function (obj, property) {\n                                return obj[property];\n                            };\n                            _.each(fields, function (field) {\n                                a = fieldValue(a, field);\n                                b = fieldValue(b, field);\n                            });\n                            if (a < b) {\n                                return dir * -1;\n                            }\n                            if (a > b) {\n                                return dir;\n                            }\n                            return 0;\n                        });\n                    });\n                }\n            }\n            return parsed;\n        };\n        return new Promise(function (resolve, reject) {\n            var headers;\n            var query = {};\n            headers = options.headers.concat(_this.headers).concat(schemaDefinition.headers || []);\n            _.defaults(query, _this.queryString);\n            _.defaults(query, schemaDefinition.queryString);\n            _.defaults(query, options.queryString);\n            options.headers = _.uniq(headers, \"name\");\n            options.queryString = query;\n            if (cacheData) {\n                try {\n                    resolve(parseData(_this.cache.getItem(cacheKey)));\n                    return;\n                }\n                catch (e) {\n                }\n            }\n            RestClient.ajax(url, method, options).then(function (response) {\n                try {\n                    if (_this.config.cacheData && httpMethod === HttpMethod.GET) {\n                        _this.cache.setItem(cacheKey, response);\n                    }\n                    resolve(parseData(response));\n                }\n                catch (ex) {\n                    reject({\n                        errors: [\"Invalid JSON: \" + ex.message]\n                    });\n                }\n            }).error(function (error) {\n                reject(error);\n            });\n        });\n    };\n    RestClient.prototype.get = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.ajax(this.getUri(url), HttpMethod[HttpMethod.GET], options);\n    };\n    RestClient.prototype.post = function (url, data, options) {\n        if (options === void 0) { options = {}; }\n        var settings;\n        settings = {\n            data: JSON.stringify(data)\n        };\n        _.defaults(options, settings);\n        return this.ajax(this.getUri(url), HttpMethod[HttpMethod.POST], options);\n    };\n    RestClient.prototype.put = function (url, data, options) {\n        if (options === void 0) { options = {}; }\n        var settings;\n        settings = {\n            data: JSON.stringify(data)\n        };\n        _.defaults(options, settings);\n        return this.ajax(this.getUri(url), HttpMethod[HttpMethod.PUT], options);\n    };\n    RestClient.prototype.remove = function (url, data, options) {\n        if (options === void 0) { options = {}; }\n        var settings;\n        settings = {\n            data: JSON.stringify(data)\n        };\n        _.defaults(options, settings);\n        return this.ajax(this.getUri(url), HttpMethod[HttpMethod.DELETE], options);\n    };\n    RestClient.prototype.updateSchema = function (schema) {\n        var _this = this;\n        var currentKeys = _.keys(this.schema);\n        var newKeys = _.keys(schema);\n        var remove = _.difference(currentKeys, newKeys);\n        _.each(remove, function (key) {\n            delete _this[key];\n        });\n        this.schema = schema;\n        this.parseSchema();\n    };\n    RestClient.ajax = function (url, method, options) {\n        if (options === void 0) { options = {}; }\n        var httpMethod = HttpMethod[method.toUpperCase()];\n        var query;\n        _.defaults(options, RestClient.defaults.AjaxOptions);\n        if (!_.isEmpty(options.data) && httpMethod === HttpMethod.GET) {\n            query = utils.serialize(options.data);\n            if (!_.isUndefined(query) && query.length > 0) {\n                url = url + ((url.indexOf(\"?\") >= 0) ? \"\" : \"?\") + query;\n            }\n        }\n        if (!_.isEmpty(options.queryString)) {\n            query = utils.serialize(options.queryString);\n            if (!_.isUndefined(query) && query.length > 0) {\n                url = url + ((url.indexOf(\"?\") >= 0) ? \"&\" : \"?\") + query;\n            }\n        }\n        return new Promise(function (resolve, reject) {\n            var errorResponse;\n            var request = RestClient.createXmlHttpRequest(method, url);\n            if (_.isNull(request)) {\n                reject(new Error(\"Failed to create a connection to the server.\"));\n                return;\n            }\n            request.onerror = function () {\n                errorResponse = {\n                    errors: [\"Unable to send request to \" + url]\n                };\n                reject(errorResponse);\n            };\n            request.onload = function () {\n                var status = request.status;\n                switch (status) {\n                    case 500:\n                        errorResponse = {\n                            errors: [\"Unexpected error.\"]\n                        };\n                        reject(errorResponse);\n                        break;\n                    case 404:\n                        errorResponse = {\n                            errors: [\"Endpoint not found: \" + url]\n                        };\n                        reject(errorResponse);\n                        break;\n                    case 400:\n                        try {\n                            errorResponse = JSON.parse(request.responseText);\n                        }\n                        catch (e) {\n                            errorResponse = {\n                                errors: [\"Unexpected error.\"]\n                            };\n                        }\n                        reject(errorResponse);\n                        break;\n                    default:\n                        if ((status >= 200 && status <= 299) || status === 304) {\n                            resolve(request.response);\n                        }\n                        break;\n                }\n            };\n            if (!_.isEmpty(options.contentType)) {\n                request.setRequestHeader(\"content-type\", options.contentType);\n            }\n            var headers = options.headers;\n            if (!_.isEmpty(headers)) {\n                _.each(headers, function (header) {\n                    request.setRequestHeader(header.name, header.value);\n                });\n            }\n            request.send((httpMethod === HttpMethod.GET ? null : options.data));\n        });\n    };\n    RestClient.createXmlHttpRequest = function (method, url) {\n        var xhr = new XMLHttpRequest();\n        if (_.has(xhr, \"withCredentials\")) {\n            xhr.open(method, url, true);\n        }\n        else {\n            xhr = null;\n        }\n        return xhr;\n    };\n    RestClient.get = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return RestClient.ajax(url, HttpMethod[HttpMethod.GET], options);\n    };\n    RestClient.post = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return RestClient.ajax(url, HttpMethod[HttpMethod.POST], options);\n    };\n    RestClient.put = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return RestClient.ajax(url, HttpMethod[HttpMethod.PUT], options);\n    };\n    RestClient.remove = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return RestClient.ajax(url, HttpMethod[HttpMethod.DELETE], options);\n    };\n    RestClient.prototype.getUri = function (uri) {\n        if (_.isString(uri)) {\n            if (uri.indexOf(\"/\") === 0) {\n                return this.config.baseApiUri + uri;\n            }\n            return uri;\n        }\n        if (_.isObject(uri)) {\n            return this.config.baseApiUri + uri.url;\n        }\n        return this.config.baseApiUri;\n    };\n    RestClient.prototype.parseSchema = function () {\n        var _this = this;\n        var schema = this.schema;\n        if (schema === undefined || schema === null) {\n            return;\n        }\n        _.each(schema, function (definition, key) {\n            var args = definition.args || [];\n            var httpMethod;\n            var method = definition.method || \"GET\";\n            var script = [];\n            var idScript = [];\n            var url = _this.getUri(definition);\n            httpMethod = HttpMethod[method.toUpperCase()];\n            if (args.length === 0) {\n                var executeScript;\n                script.push(\"\\tvar url = \\\"\" + url + \"\\\";\\n\");\n                script.push(\"\\tvar options = {\\n\");\n                script.push(\"\\t\\t\\\"schemaDefinition\\\": \\\"\" + key + \"\\\"\\n\");\n                script.push(\"\\t};\\n\\n\");\n                idScript.push(\"\\tif (!_.isUndefined(arguments[0]) && !_.isObject(arguments[0])) {\\n\");\n                idScript.push(\"\\t\\toptions.data = arguments[1];\\n\");\n                idScript.push(\"\\t\\turl += \\\"/\\\" + arguments[0];\\n\");\n                idScript.push(\"\\t}\\n\");\n                idScript.push(\"\\telse if (_.isObject(arguments[0])) {\\n\");\n                idScript.push(\"\\t\\toptions.data = arguments[0];\\n\");\n                idScript.push(\"\\t}\\n\");\n                executeScript = script.slice(0);\n                executeScript.push(idScript.join(\"\"));\n                switch (httpMethod) {\n                    case HttpMethod.DELETE:\n                        executeScript.push(\"\\n\\treturn this.remove(url, options);\");\n                        break;\n                    case HttpMethod.POST:\n                        executeScript.push(\"\\n\\tvar data = options.data;\\n\");\n                        executeScript.push(\"\\n\\tdelete options.data;\\n\");\n                        executeScript.push(\"\\n\\treturn this.post(url, data, options);\");\n                        break;\n                    case HttpMethod.PUT:\n                        executeScript.push(\"\\n\\tvar data = options.data;\\n\");\n                        executeScript.push(\"\\n\\tdelete options.data;\\n\");\n                        executeScript.push(\"\\n\\treturn this.put(url, data, options);\");\n                        break;\n                    default:\n                        executeScript.push(\"\\n\\treturn this.get(url, options);\");\n                        break;\n                }\n                if (_.has(_this, key)) {\n                    delete _this[key];\n                }\n                _this[key] = new Function(\"id\", executeScript.join(\"\"));\n                if (definition.autoGenerateCrud === true) {\n                    var newKey = key.charAt(0).toUpperCase() + key.substring(1);\n                    var deleteKey = \"delete\" + newKey;\n                    var deleteScript;\n                    var postKey = \"post\" + newKey;\n                    var postScript;\n                    var putKey = \"put\" + newKey;\n                    var putScript;\n                    deleteScript = script.slice(0);\n                    postScript = script.slice(0);\n                    putScript = script.slice(0);\n                    deleteScript.push(idScript.join(\"\"));\n                    deleteScript.push(\"return this.remove(url, data, options);\\n\");\n                    postScript.push(\"return this.post(url, data, options);\\n\");\n                    putScript.push(idScript.join(\"\"));\n                    putScript.push(\"return this.put(url, data, options);\\n\");\n                    if (_.has(_this, deleteKey)) {\n                        delete _this[deleteKey];\n                    }\n                    if (_.has(_this, postKey)) {\n                        delete _this[postKey];\n                    }\n                    if (_.has(_this, putKey)) {\n                        delete _this[putKey];\n                    }\n                    _this[\"delete\" + newKey] = new Function(\"id\", deleteScript.join(\"\"));\n                    _this[\"post\" + newKey] = new Function(\"data\", postScript.join(\"\"));\n                    _this[\"put\" + newKey] = new Function(\"id, data\", putScript.join(\"\"));\n                }\n            }\n            else {\n                var argsFiltered;\n                var filteredArgs = [];\n                var match = url.match(/\\{\\d\\}/g);\n                var matchCount = (match) ? match.length : 0;\n                var parameters = \"\";\n                var regexp = new RegExp(\"\\\\{\\\\d\\\\}\");\n                if (matchCount <= args.length) {\n                    for (var i = 0; i < matchCount; i += 1) {\n                        filteredArgs.push(args.shift());\n                    }\n                }\n                _.each(args, function (arg) {\n                    if (parameters.length > 0) {\n                        parameters += \", \";\n                    }\n                    parameters += arg;\n                });\n                argsFiltered = filteredArgs.length > 0;\n                script.push(\"\\tvar url = \\\"\" + url + \"\\\";\\n\");\n                script.push(\"\\tvar options = {\\n\");\n                if (args.length > 0) {\n                    var json = [];\n                    script.push(\"\\t\\t\\\"data\\\": {\\n\");\n                    _.each(args, function (arg, i) {\n                        var index = (argsFiltered) ? i + matchCount : i;\n                        var name = arg;\n                        if (json.length > 0) {\n                            json.push(\",\\n\");\n                        }\n                        json.push(\"\\t\\t\\t\\\"\" + name + \"\\\": arguments[\" + index + \"]\");\n                    });\n                    script.push(json.join(\"\"));\n                    script.push(\"\\n\\t\\t},\");\n                    script.push(\"\\n\");\n                }\n                script.push(\"\\t\\t\\\"schemaDefinition\\\": \\\"\" + key + \"\\\"\");\n                script.push(\"\\n\\t};\\n\");\n                if (regexp.test(url)) {\n                    script.push(\"\\tvar args = [url];\\n\");\n                    script.push(\"\\tvar filteredArgs = [];\\n\");\n                    script.push(\"\\tvar passedArgs = Array.prototype.slice.call(arguments);\\n\\n\");\n                    script.push(\"\\tfor (var i = 0; i < \" + matchCount + \"; i += 1) {\\n\");\n                    script.push(\"\\t\\tfilteredArgs.push(passedArgs.shift());\\n\");\n                    script.push(\"\\t}\\n\");\n                    script.push(\"\\targs = args.concat(filteredArgs);\\n\");\n                    script.push(\"\\turl = utils.formatString.apply(null, args);\\n\\n\");\n                }\n                script.push(\"\\treturn this.ajax(url, \\\"\" + HttpMethod[httpMethod] + \"\\\", options);\");\n                if (_.has(_this, key)) {\n                    delete _this[key];\n                }\n                _this[key] = new Function(parameters, script.join(\"\"));\n            }\n        });\n    };\n    RestClient.test = \"TEST\";\n    RestClient.defaults = {\n        AjaxOptions: {\n            contentType: \"application/json\"\n        }\n    };\n    return RestClient;\n})();\nmodule.exports = RestClient;\n","var Utilities;\n(function (Utilities) {\n    Utilities.formatString = function (format) {\n        var params = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            params[_i - 1] = arguments[_i];\n        }\n        var formatted = format;\n        var index;\n        var length;\n        var regexp;\n        length = params.length;\n        for (index = 0; index < length; index += 1) {\n            var value = params[index];\n            regexp = new RegExp(\"\\\\{(\\\\s)?\" + index + \"(\\\\s)?\\\\}\", \"gi\");\n            formatted = formatted.replace(regexp, value);\n        }\n        return formatted;\n    };\n    Utilities.serialize = function (data) {\n        if (!_.isObject(data)) {\n            return data;\n        }\n        if (_.isNull(data) || _.isUndefined(data)) {\n            return \"\";\n        }\n        var parameters = [];\n        _.each(data, function (value, key) {\n            if (!_.isUndefined(value)) {\n                var parameter = encodeURIComponent(key) + \"=\";\n                parameter += encodeURIComponent((_.isObject(value)) ? JSON.stringify(value) : value);\n                parameters.push(parameter);\n            }\n        });\n        return parameters.join(\"&\");\n    };\n})(Utilities || (Utilities = {}));\nmodule.exports = Utilities;\n"],"sourceRoot":"/source/"}